Description: >
    Server template script for Udacity ALX-T Cloud DevOps Engineering Nanodegree Scholarship Project 2

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names.
        Type: String
      # EC2 default AMI to use to deploy the instance
    EC2InstanceAMI:
      Description: Ec2 instance AMI
      Type: String

Resources:
    # IAM role to allow the EC2 instance to access files from the S3 bucket
    S3BucketAccessfromEC2:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
                - 
                  Effect: "Allow"
                  Principal:
                    Service:
                      - "ec2.amazonaws.com"
                  Action:
                    - "sts:AssumeRole"
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AmazonS3FullAccess
                  
    # Ec2 isntance profile
    ProfileWithRolesForOurApp: 
        Type: AWS::IAM::InstanceProfile
        Properties: 
          Path: /
          Roles: 
            - UdacityS3ReadOnlyC2

    # Loadbalancer security group to allow Ingress and and Egress http
    LoadBalancerSG:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: http access to Load Balancer open
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0

    # Ec2 instance security group to allow ssh anf http protocols
    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription:  Access http from the ec2 instance and allow ssh
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0

    # EC2 launch Configuration to deploy ec2 initial configurations
    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              sudo apt-get update -y
              sudo apt-get install apache2 -y
              sudo systemctl start apache2.service
              cd /var/www/html
              echo "<h1>Hello, welcome to Muhammad's Udacity ALX-T Cloud DevOps Engineering Nanodegree project.</h1>" > index.html
              echo "<h3>I am excited to see the project live.</h3>" >> index.html
              echo "<P>This project over the last one month has afforded me the opportunity to acquire great skills on DevOps with AWS cloud services.</P>"  >> index.html
              echo "<P>Until last month, I have never heard of CloudFormation through my career as a Data Scientist</P>" >>  index.html
              echo "<P>But now I am able to work on this project by carefully curating the course materials, doing additional researches and a number of trials and errors</P>" >> index.html
              echo "<a href="https://www.alx-t.com/">Thanks to Udacity and ALX-T for this great opportunity. It means a lot to my career</a>" >> index.html


          ImageId: ami-0ee8244746ec5d6d4
          KeyName: Muhammad
          SecurityGroups:
          - Ref: WebServerSecGroup
          InstanceType: t2.micro
          BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: '10'

    # AutoScaling group
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
            - Fn::ImportValue: !Sub "${EnvironmentName}-PRIVATE-SUBNET-1"
            - Fn::ImportValue: !Sub "${EnvironmentName}-PRIVATE-SUBNET-2"
            LaunchConfigurationName:
              Ref: WebAppLaunchConfig
            MinSize: '4'
            MaxSize: '5'
            TargetGroupARNs:
            - Ref: WebAppTargetGroup

    # Application loadbalancer
    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
          Subnets:
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUBLIC-SUBNET-1"
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUBLIC-SUBNET-2"
          SecurityGroups:
          - Ref: LoadBalancerSG
    # load balancer listener
    LBListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
          DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: WebAppTargetGroup
          LoadBalancerArn:
            Ref: WebAppLB
          Port: '80'
          Protocol: HTTP
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
          Actions:
          - Type: forward
            TargetGroupArn: !Ref 'WebAppTargetGroup'
          Conditions:
          - Field: path-pattern
            Values: [/]
          ListenerArn: !Ref 'LBListener'
          Priority: 1

    # laod balancer target group
    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckIntervalSeconds: 30
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 10
          HealthyThresholdCount: 2
          Port: 80
          Protocol: HTTP
          UnhealthyThresholdCount: 6
          VpcId:
            Fn::ImportValue:
              Fn::Sub: "${EnvironmentName}-VPCID"

Outputs:

    LoadBalancer:
      Description: Output reference for the load balancer
      Value: !Ref WebAppLB


    LoadBalancerUrl:
      Description: The loadbalancer url
      Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ] ]